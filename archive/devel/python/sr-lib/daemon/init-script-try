#!/usr/bin/env python
# -*- coding: utf-8 -*-
#----------------------------------------------------------------------------
"""                                                                     
DESCRIPTION     shell init script for daemon start (python implementation{{{1

USAGE           call this script with -h or --help option
      
CHANGELOG    
    10-05-18    * added command line parameter analysis and  logging 

TODO
THANKS TO

"""

__version__ = "$Revision: 0.1-2010-08-11 $"
# $Source$


#----------------------------------------------------------------------------
# debian init script stuff
#----------------------------------------------------------------------------
### BEGIN INIT INFO
# Provides:          icontserver
# Required-Start:    $network $local_fs 
# Required-Stop:     $network $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: secu-ring iContServer
### END INIT INFO

#----------------------------------------------------------------------------
# modules import, constants, config file                                 {{{1
#----------------------------------------------------------------------------
# standard
import os
import sys
import time

# extra modules
from pt.terminal  import *   # flush buffers, colors, terminal size
from pt.config    import *   # configfile handler
from pt.daemon    import *   # daemon tool

# constants, default values from 
DEFAULT_CONFIG_FILE = '/etc/default/' + os.path.split(sys.argv[0])[1] + '.conf'

# ---------------------------------------------------------------------------
# daemon class
# ---------------------------------------------------------------------------
class TestDaemonError( Exception ):
    pass

class TestDaemon(Daemon):
    def __init__( 
        self, 
        config_file = None, 
        pid_file    = None, 
        log_file    = None, 
        user        = None, 
    ):

        # initialize daemon
        try:
            Daemon.__init__(
                self,
                pidfile = pid_file,
                logfile = log_file,
                user    = user    ,
            )
        except DaemonError, emsg:
            raise TestDaemonError(
                "Could not initialize test daemon\n%s" % emsg
            )


#    def Run(self):
#        # make use of self.config here
#        import time
##        sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
#        while True:
#            print ".",
#            time.sleep(0.5)
            

#----------------------------------------------------------------------------
# main script                                                            {{{1
#----------------------------------------------------------------------------
if __name__ == "__main__":

    if sys.argv[0] == '-':
        # test command line arguments
        argv = ['-h']
    else:
        # script called externally
        argv = sys.argv[1:] 

    # load config file
    if config_file is not None:
        try:
            self.config = Config( config_file , create_empty = True )
        except ConfigError, emsg:
            sys.stderr.write(
                "Error loading config file '%s':\n%s\n" 
                % config_file , emsg )
            )

    # init daemon
    daemon = Daemon(
        config  = None ,    # o
        pidname = None ,    # optional
        logfile = None ,    # optional 
        user    = None ,    # optional
        Run     = None ,    # necessary
        Zap     = None ,    # optional
        Status
        Cleanup = None ,    # optional
        Reload  = None ,    # reload function is optinal
        Usage   = None ,    # usage  function is optional
    )

    # run daemon command
        daemon.Run = Run
#    def Status(self):
#    def Zap(self):
#    def Cleanup(self):
#    def Reload(self):
#    def Usage(self):
        daemon.run_cli_cmd( argv )


        def Run():
            # make use of self.config here
            import time
            while True:
                print ".",
                time.sleep(0.5)


        # start according to command line options
        if len(sys.argv) == 2:
            if   'start'    == sys.argv[1]:
                daemon.start()
            elif 'stop'     == sys.argv[1]:
                daemon.stop()
            elif 'restart'  == sys.argv[1]:
                daemon.restart()
            elif 'reload'   == sys.argv[1]:
                daemon.reload()
            elif 'status'   == sys.argv[1]:
                daemon.status()
            elif 'zap'      == sys.argv[1]:
                daemon.zap()
            elif 'debug'    == sys.argv[1]:
                logfile = None
                daemon.foreground()
            else:
                daemon.Usage()
                print
                print "Unknown command '%s'" % sys.argv[1]
                sys.exit(2)

        else:
            daemon.Usage()
            sys.exit(2)

    # exception raised while running or stopping daemon
    except TestDaemonError, emsg:
        sys.stderr.write( "[EE] Could not initiate test daemon\n%s\n" % emsg)
        sys.exit(1)
    except DaemonError, emsg:
        sys.stderr.write( "[EE] %s\n" % emsg)
        sys.exit(1)
    except KeyboardInterrupt:  
        sys.stderr.write( "\nUser break.\n" )
        sys.exit(0)




 

