#!/usr/bin/env python
# -*- coding: utf-8 -*-
#vim:fdm=marker
# unlock vim folding via zR, zo and lock folding via zM, zc
#----------------------------------------------------------------------------
"""                                                                     
DESCRIPTION    simple directory handler functions                        {{{1

USAGE          call this script with -h or --help option
      
CHANGELOG    
   10-02-12    * creation, copied from fstools.py

TODO

THANKS TO

"""

__version__ = "$Revision: 0.1.2010-02-12 $"
# $Source$


#----------------------------------------------------------------------------
# modules import, constants                                              {{{1
#----------------------------------------------------------------------------
# standard
import logging
import sys
log = logging.getLogger( __name__ )

# extra modules
from pt.terminal  import *   # flush buffers, colors, terminal size
from pt.syscmd    import *   # shell command handler ( subprocess )
from pt.logger    import *   # set up logger
from pt.optparser import *   # analyse command line options
from pt.daemon    import *   # daemonizer 
from pt.config    import *   # configfile handler

# constants
DAEMON_NAME="testdaemon"
 
#----------------------------------------------------------------------------
# support functions                                                      {{{1
#----------------------------------------------------------------------------
def loadConfig( config_file ):
    try:
        return Config( config_file , create_empty = True )
    except ConfigError, emsg:
        log.error( emsg )
        sys.exit ( 2 )


def setupLogging():
    """return logger instance"""
    return Logger(
#            style = "plain",
            name         = __name__ , # __name__ or self.__class__.__name__ 
            level        = logging.DEBUG,  
            file_file    = None,      # None = no file logging
            file_level   = logging.DEBUG,         
        )


def parseArgs( args ):
    # script specific command line options
    parser = OptParser(
        usage       = '%prog CMD PATH'               ,
        description = 'some example shell script'   ,
        standard_opts = True,
        daemon_opts   = True,
    )
    parser.add_option( '', '--target', dest="target",
                    action='store_true', default = False,
                    help='destination')
    parser.add_option( '-f', '--config', dest="config",
                    action='store', default = None,
                    help='alternate config file')
    parser.add_option( '-t', '--test', dest="run_test",
                    action='store_true', default = False,
                    help='run shell script tests')


    # command line option handling
    return parser.parse_args( args, log )


def prepareDaemon( opts ):
    return Daemon(
       callname= opts.daemon_name or DAEMON_NAME,
       logfile = opts.daemon_logf,
       user    = opts.daemon_user,
    )

#----------------------------------------------------------------------------
# main script                                                            {{{1
#----------------------------------------------------------------------------
if __name__ == "__main__":
    import sys
    import os

    if sys.argv[0] == '-':
        # test command line arguments
        argv = [ 
#            '-h',
            '-v', 
            '-D', 
            'status',
            '-t',
        ]
    else:
        # script called externally
        argv = sys.argv[1:] 

    # preparations
    log        = setupLogging()
    opts, args = parseArgs( argv )
    #config     = loadConfig( opts.config )
    daemon     = prepareDaemon( opts )

    # handle daemon options
    if opts.daemon_cmd in ['start','stop','restart','debug']:
        daemon.handle_cmd( opts.daemon_cmd )
    if opts.daemon_cmd == 'reload':
        config = loadConfigFile( opts.config )        
    if opts.daemon_cmd == 'zap':
        daemon.zap()
        print "Some cleanup work"
        sys.exit(0)
    if opts.daemon_cmd == 'status':
        daemon.status()
        print "more status info" 
        sys.exit(0)



    if opts.run_test:
        #print config['Hallo4'].keys()
        for line,err in syscmd( "cat", stdin="hall\nwewedewdw\nwdwe", pipe=True ):
            print line
        print "%sred %salarm%s normal" % ( RED, ALARM, NORMAL )

