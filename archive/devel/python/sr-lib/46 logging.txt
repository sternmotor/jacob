#!/usr/bin/env python
# -*- coding: utf-8 -*-




# log level info: everything worth showing up in logs
# log level debug: needed information when things go wrong or during development
# warnings: log.warning
# errors: raise exceptions, logging gets done from callers perspective
# all othe

# module logging
# on top of each module, define some larifari logger:
# important: set logger name here so messages can be filtered in parent

    # example module
    import logging
    log = logging.getLogger( __name__ ) 
    class Class()

# do ot overwrite callers log instance by importet module 
YES:
    import module
    instance = module.Class()
NO:
    from module import *
    instance=Class()


# exceptions: do not log exceptions but let parent module handle logging
NO:
    msg = "could not do anything"
    log.error(msg)
    raise SorryError( msg)

    # but 
YES:
    msg = "could not do anything"
    raise SorryError( msg)






Example:

# for running module, define logging like
if __name__ == "__main__":
    import sys
    import os
    import logging

    log = logging.getLogger()

    # debug logging
    logging.basicConfig(
        level    = logging.DEBUG        ,
        datefmt  = "%Y-%m-%d %H:%M:%S"  ,
        format   = "%(asctime)-20s %(levelname)-8s%(name)s:%(funcName)" \
                 + "s[%(lineno)d]\t%(message)s"                         ,
        #filename = ""                  ,
    )

    # standard logging
    logging.basicConfig(
        level    = logging.INFO        ,
        datefmt  = "%Y-%m-%d %H:%M:%S"  ,
        format   = "%(asctime)-20s %(levelname)-8s%(name)s\t%(message)s",
        #filename = ""                  ,
    )


    # short logging
    logging.basicConfig(
        level    = logging.INFO        ,
        datefmt  = "%Y-%m-%d %H:%M:%S"  ,
        format   = "%(asctime)-20s %(message)s",
        #filename = ""                  ,
    )
==============

# log to file vers 1:
import logging
import logging.handlers

LOG_FILENAME = '/tmp/logging_rotatingfile_example.out'

# Set up a specific logger with our desired output level
my_logger = logging.getLogger('MyLogger')
my_logger.setLevel(logging.DEBUG)

# Add the log message handler to the logger
handler = logging.handlers.RotatingFileHandler(
              LOG_FILENAME, maxBytes=20, backupCount=5
          )
my_logger.addHandler(handler)
           


# log to file vers. 2:
import logging
logging.basicConfig (
    level    = logging.DEBUG,
    format   = "%(asctime)s %(levelname)-8s %(message)s" ,
    datefmt  = "%Y-%m-%d %H:%M:%S" ,
    filename = '/tmp/spam.log',
    filemode = 'w',
)
logging.debug(   "Very special information." )
logging.info(    "I am doing this and that." )
logging.warning( "You should know this."     )
# CRITICAL, ERROR, EXCEPTION, WARNING, INFO, DEBUG


