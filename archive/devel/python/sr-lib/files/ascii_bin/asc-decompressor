#!/usr/bin/env python
# -*- coding: utf-8 -*-
#vim:fdm=marker
# unlock vim folding via zR, zo and lock folding via zM, zc
#----------------------------------------------------------------------------
"""                                                                     
DESCRIPTION    converts directories and files to ascii stream            {{{1

USAGE          call this script with -h or --help option
      
CHANGELOG    
   10-02-12    * creation, copied from fstools.py

TODO

THANKS TO

"""

__version__ = "$Revision: 0.1.2010-02-12 $"
# $Source$


#----------------------------------------------------------------------------
# modules import, constants                                              {{{1
#----------------------------------------------------------------------------
# standard
import logging
import sys
log = logging.getLogger( __name__ )

# extra modules
from pt.optparser import *   # analyse command line options

# constants
 
#----------------------------------------------------------------------------
# support functions                                                      {{{1
#----------------------------------------------------------------------------
def parseArgs( args ):
    # script specific command line options
    parser = OptParser(
        usage       = '%prog [INPUT ASCII FILE] [OUTPUT DIR]',
        description = 'Unpacks an urlsafe base64 encoded ascii tar file which was generated with \nasc-compressor tool. In case no source file is given, stdin is read.\nThis script shall be used for transfering directories by means of terminal copy paste.\n\nExamples:\n  %prog < asc.txt\n  asc-compressor /etc | asc-decompressor -o /tmp\nYou can insert ascii text (drag/drop) when\nno INPUT is defined, finish your input by hitting CTRL-D',
        standard_opts = True,
        daemon_opts   = False,
    )

    parser.add_option( '-i', '--input', dest="inputfile",
                    action='store', default = None,
                    help='ascii file to read data from (stdin otherwise)')
    parser.add_option( '-o', '--outdir', dest="outdir",
                    action='store', default = None,
                    help='directory to unpack data to')


    # command line option handling
    return parser.parse_args( args, log )

#----------------------------------------------------------------------------
# main script                                                            {{{1
#----------------------------------------------------------------------------
if __name__ == "__main__":
    import sys
    import os
    import tempfile
    #import pt.logger   # set up logger
    import pt.terminal 
    import pt.files.ascii_bin
    import pt.files.tar

    DEFAULT_TERMINAL_COLS = 150

    # check command line options, in case of NameError this script is used
    # in a pipe
    opts, args = parseArgs( sys.argv[1:] )
    output_dir = opts.outdir
    if not opts.inputfile:
        print( 
            ">>> Ready to decode to directory '%s'. Paste encoded content, "
            'start decoding by hitting "CTRL-D" :\n'
            % (output_dir and output_dir or os.getcwd() )
        )
    input_fh = opts.inputfile and open( opts.inputfile, 'r') or sys.stdin


    tmp_file_fh = tempfile.NamedTemporaryFile(mode='w+b')
    # decode ascii to tar
    try: 
        pt.files.ascii_bin.asc2bin( input_fh, tmp_file_fh)
    except pt.files.ascii_bin.Asc2BinError, emsg:
        sys.stderr.write( "%s\n" % emsg)
        sys.exit(1)

    # untar decoded file
    tmp_file_fh.seek(0)
    try:
        pt.files.tar.decompress( tmp_file_fh.name, output_dir)
    except pt.files.tar.TarError, emsg:
        sys.stderr.write( emsg )
        sys.exit(1)
    except EOFError, emsg:
        sys.stderr.write( "Error: end of file not found!\n" )
        sys.exit(2)

