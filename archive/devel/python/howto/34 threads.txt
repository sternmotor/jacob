#!/usr/bin/env python
# -*- coding: utf-8 -*-



# threads
class Counter ( threading.Thread ):
    def __init__ ( self ):
          threading.Thread.__init__( self )
          self.counter = 0
    def run ( self ): # Hauptteil
          while self.counter < 10:
               self.counter += 1
               print self.counter
counter = Counter()
counter.start() # Thread starten
# hier etwas gleichzeitig tun ...
counter.join() # Warte auf Ende des Threads


# locking
# Problem, wenn zwei Threads gleichzeitig auf das gleiche Objekt schreibend zugreifen wollen!
# Verhindern, dass Programmteile gleichzeitig ausgefuehrt werden

l = threading.Lock()
l.aquire() # Warte bis Lock frei ist und locke es dann
... some code
l.release() # Lock freigeben fuer andere

# events - communication between threads
# example: tell threads to stop executing
e.isSet() # check event state
e.set()   # set event
e.clear() # reset event
e.wait([timeout]) # wait for event


